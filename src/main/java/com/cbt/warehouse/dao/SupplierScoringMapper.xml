<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cbt.warehouse.dao.SupplierScoringMapper" >
	<!--供应商  -->
	<resultMap type="com.cbt.warehouse.pojo.SupplierScoringBean" id="supplierScoringMap">
  		<id column="id" property="id" />
		<result column="shop_id" property="shopId" />
		<result column="shop_url" property="shopUrl" />
		<result column="quality_avg" property="qualityAvg" />
		<result column="service_avg" property="serviceAvg" />
		<result column="level" property="level" />
		<result column="address" property="address" />
		<result column="return_days" property="returnDays" />
		<result column="inventory_agreement" property="inventoryAgreement" />
		<result column="createtime" property="createTime" />
		<result column="updatetime" property="updateTime" />
		<result column="counts" property="counts" />
		<result column="allcounts" property="allcounts"/>
		<result column="shopType" property="shopType" />
		<result column="authorizedFlag" property="authorizedFlag"/>
		<result column="noSupplier" property="noSupplier"/>
		<result column="sell" property="sell"/>
   	</resultMap>
   	<!-- 供应商供应的产品 -->
		<resultMap type="com.cbt.warehouse.pojo.SupplierProductsBean" id="supplierProductMap">
	  		<id column="id" property="id" />
			<result column="shop_id" property="shopId" />
			<result column="goods_pid" property="goodsPid" />
			<result column="goods_img" property="goodsImg" />
			<result column="quality" property="quality" />
			<result column="service" property="service" />
			<result column="remark" property="remarks" />
			<result column="1688_url" property="goodsUrl"/>
			<result column="createtime" property="createtime" />
			<result column="userid" property="userId"/>
			<result column="username" property="userName"/>
			<result column="updatetime" property="updateTime"/>
	   	</resultMap>
	   	
	   	<sql id="supplierScoring">
	   		id,shop_id,shop_url,quality_avg,service_avg,level,createtime,inventory_agreement,return_days
	   	</sql>
	   	<sql id="supplierProduct">
	   		id,shop_id,goods_pid,quality,service,remark,createtime,userid,username
	   	</sql>
	<select id="getShoptype" resultType="com.cbt.warehouse.pojo.SupplierScoringBean">
		SELECT shop_type as shopId,authorized_flag as shopUrl FROM shop_url_bak WHERE shop_id=#{shopId}
	</select>
	<select id="querySupplierScoringByPage" resultMap="supplierScoringMap">
-- 		SELECT a.shopId,b.en_name as category,a.address,a.id,a.quality_avg,a.service_avg,a.level,a.inventory_agreement,a.return_days,a.counts,a.allcounts,a.shopType,a.authorizedFlag,a.noSupplier FROM (
		SELECT b.en_name as category,smi.shop_id AS shopId,smi.catid,smi.noSupplier,sa.addr AS address,s.id,s.quality_avg,
          s.service_avg,s.level,s.inventory_agreement,s.return_days,smi.allcounts,smi.counts,su.shop_type AS shopType,
          su.authorized_flag AS authorizedFlag, smi.sell
		FROM shop_manager_info smi
		INNER JOIN 1688_category b ON smi.catid=b.category_id
		LEFT JOIN shop_addr_spider sa ON sa.shop_id=smi.shop_id
		LEFT JOIN supplier_scoring s ON smi.shop_id=s.shop_id
		LEFT JOIN shop_url_bak su ON su.shop_id=smi.shop_id
		where 1=1
		<if test="flag">
		</if>
		<if test="shop_id != null and shop_id != ''">
			and smi.shop_id=#{shop_id}
		</if>
		<if test="level != null and level != ''">
			and s.level =#{level}
		</if>
		<if test="quality != null and quality != ''">
			and s.quality_avg>=#{quality} and s.quality_avg&lt;#{qualitys}
		</if>
		<if test="services != null and services != ''">
			and s.service_avg >=#{services} and s.service_avg&lt;#{servicess}
		</if>
		<if test="authorized != null">
			and su.authorized_flag=${authorized}
		</if>
		<if test="categoryName != null">
			and b.en_name like CONCAT('%','${categoryName}','%' )
		</if>
		/*GROUP BY smi.shop_id*/
        ORDER BY smi.sell DESC
		limit #{startindex},#{pagesize}
-- 		) a
	</select>
	
	<select id="querySupplierRecord" resultType="java.lang.Integer">
		select count(a.shopId) from (
		SELECT c.shop_id AS shopId
		FROM shop_manager_info c
		INNER JOIN 1688_category b ON c.catid=b.category_id
		LEFT JOIN supplier_scoring s ON c.shop_id=s.shop_id
		left join shop_url_bak su on su.shop_id=c.shop_id
		WHERE 1=1
		<if test="flag">

		</if>
		<if test="shop_id != null and shop_id != ''">
			and c.shop_id=#{shop_id}
		</if>
		<if test="level != null and level != ''">
			and s.level =#{level}
		</if>
		<if test="quality != null and quality != ''">
			and s.quality_avg>=#{quality} and s.quality_avg&lt;#{qualitys}
		</if>
		<if test="services != null and services != ''">
			and s.service_avg >=#{services} and s.service_avg&lt;#{servicess}
		</if>
		<if test="authorized != null">
			and su.authorized_flag=${authorized}
		</if>
		<if test="categoryName != null">
			and b.en_name like CONCAT('%','${categoryName}','%' )
		</if>
		GROUP BY c.shop_id
		) a
	</select>
	<!-- 查询 别人打过分的shuju不是当前用户的信息 -->
	<select id="queryProductsByShopId" resultMap="supplierProductMap">
			 select tmp.1688_url,tmp.1688_pid as goods_pid,tmp.goods_img,tmp.shop_id,sp.* 
			from (select 1688_url,shop_id,1688_pid, IF(goods_img!='',goods_img,1688_img) as goods_img from ali_info_data group by 1688_pid having shop_id=#{shop_id}) tmp 
			LEFT JOIN supplier_product sp on tmp.1688_pid=sp.goods_pid 
			 where 1=1
			 <if test="userId!=-1">
				and userid !=#{userId} and userid is not null
			 </if>
			 
			 <if test="goodsPid!=null">
			 	AND tmp.1688_pid=#{goodsPid} 
			 </if>
	</select>
	<!-- 查询该商店下 需要用户科评分的 -->
	 <select id="queryOneProductsUserId" resultMap="supplierProductMap">
			 select 1688_url,shop_id,1688_pid as goods_pid,IF(goods_img!='',goods_img,1688_img) as goods_img from ali_info_data group by 1688_pid having shop_id=#{shop_id} 
			  <if test="goodsPid!=null">
			 	AND 1688_pid=#{goodsPid} 
			 </if> 
	</select> 
		
		<select id="queryByProductScoreId" resultMap="supplierProductMap">
			select * from supplier_product where goods_pid=#{goodsPid} and  userid=#{userId}
		</select>		
		
	<!--查询产品打分表中的所有的该供应商下的打过分产品  -->
	<select id="searchProductListByShopId" resultMap="supplierProductMap">
			select <include refid="supplierProduct"/>
			from supplier_product where shop_id=#{shop_id} and  goods_pid=#{shop_id}
	</select>
	<!-- 查询供应商打分表中,该供应商打过分的数据 -->
	<select id="searchOneScoringByShopId" resultMap="supplierScoringMap">
		   select <include refid="supplierScoring"/>
		   from supplier_scoring where shop_id=#{shop_id}
	</select>
	<!-- 根据信息去查询该用户对店铺的打的分  -->
		<select id="searchUserScoringByShopId" resultMap="supplierProductMap">
			select <include refid="supplierProduct"/>
			from supplier_product where shop_id=#{shop_id} and goods_pid=#{shop_id} and userid=#{userId}
		</select>
	<select id="querySupplierAllScoresSupplier" resultMap="supplierProductMap">
			select <include refid="supplierProduct"/>
			from supplier_product where shop_id=#{shop_id} and goods_pid=#{shop_id} 
	</select>
	
	<!-- 保存或者修改 商品打分数据-->
	<update id="saveOrupdateProductScord" useGeneratedKeys="true" keyProperty="supplierProductsBean.id" parameterType="com.cbt.warehouse.pojo.SupplierProductsBean">
			<if test="supplierProductsBean.id == 0">
				insert into supplier_product (shop_id,goods_pid,quality,service,remark,createtime,userid,username,updatetime)
				 values 
				 (#{supplierProductsBean.shopId},#{supplierProductsBean.goodsPid},#{supplierProductsBean.quality},#{supplierProductsBean.service},#{supplierProductsBean.remarks},now(),#{supplierProductsBean.userId},#{supplierProductsBean.userName},#{supplierProductsBean.updateTime})
			</if>
			<if test="supplierProductsBean.id != 0">
				update  supplier_product set shop_id=#{supplierProductsBean.shopId},goods_pid=#{supplierProductsBean.goodsPid},quality=#{supplierProductsBean.quality}
					,service=#{supplierProductsBean.service},remark=#{supplierProductsBean.remarks},updatetime=#{supplierProductsBean.updateTime} where id=#{supplierProductsBean.id}
					
			 </if>
	</update>
	
	<!--保存或者修改用户对店铺进行打分  -->
	<update id="saveOrupdateSupplierScoringScord">
	<if test="supplierScoringBean.id == 0">
				insert into supplier_product (shop_id,goods_pid,quality,service,createtime,userid,username,updatetime)
				 values 
				 (#{supplierScoringBean.shopId},#{supplierScoringBean.shopId},#{supplierScoringBean.qualityAvg},#{supplierScoringBean.serviceAvg},#{supplierScoringBean.createTime},#{userId},#{userName},#{supplierScoringBean.updateTime})
			</if>
			<if test="supplierScoringBean.id != 0">
				update  supplier_product set quality=#{supplierScoringBean.qualityAvg}
					,service=#{supplierScoringBean.serviceAvg} ,updatetime = #{supplierScoringBean.updateTime} where id=#{supplierScoringBean.id}
			 </if>
	
	</update>
	<insert id="saveSupplierProduct">
		insert into supplier_product (shop_id,goods_pid,quality,createtime,userid,username,remark) values
		(#{shopId},#{goodsPid},#{quality},now(),#{admuserId},#{username},#{remarks})
	</insert>
	<select id="getSupplierScoring" resultType="com.cbt.warehouse.pojo.SupplierScoringBean">
		select shop_id as shopId from supplier_scoring where shop_id=#{shopId}
	</select>
	<select id="getAllShopScoring" resultType="com.cbt.warehouse.pojo.SupplierProductsBean">
		select quality from  supplier_product where shop_id=#{shopId}
	</select>
	<update id="updateSupplierScoring">
		update supplier_scoring set quality_avg=#{quality},level=#{level},return_days=#{days},inventory_agreement=#{inven},updatetime=now() where shop_id=#{shopId}
	</update>
	<insert id="saveSupplierScoring">
		insert into supplier_scoring(shop_id,quality_avg,level,return_days,inventory_agreement,createtime) values
		(#{shopId},#{quality},#{level},#{days},#{inven},now())
	</insert>
	<!-- 更新或新增供应商打分表的数据 -->
		<insert id="insertOrupdateScoringScoring"  useGeneratedKeys="true" keyProperty="scoringBean.id" keyColumn="id" parameterType="com.cbt.warehouse.pojo.SupplierScoringBean">
				<if test="scoringBean.id == 0">
				insert into supplier_scoring (shop_id,shop_url,quality_avg,service_avg,level,createtime,updatetime)
				 values 
				 (#{scoringBean.shopId},#{scoringBean.shopUrl},#{scoringBean.qualityAvg},#{scoringBean.serviceAvg},#{scoringBean.level},#{scoringBean.createTime},#{scoringBean.updateTime})
			</if>
			<if test="scoringBean.id != 0">
				update supplier_scoring set shop_id=#{scoringBean.shopId},shop_url=#{scoringBean.shopUrl}, quality_avg=#{scoringBean.qualityAvg}
					   ,service_avg=#{scoringBean.serviceAvg},level=#{scoringBean.level} ,updatetime = #{scoringBean.updateTime} where id=#{scoringBean.id}
					
			 </if>
		</insert>
		<!-- 库存协议 -->
	<insert id="saveOrUpdateInven" parameterType="com.cbt.warehouse.pojo.SupplierScoringBean">
			<if test="bean.id==0">
				insert into supplier_scoring (shop_id,inventory_agreement,return_days,createtime,updatetime) values(#{bean.shopId},#{bean.inventoryAgreement},#{bean.returnDays},#{bean.createTime},#{bean.updateTime})
			</if>
			
			<if test="bean.id!=0">
				update supplier_scoring set inventory_agreement =#{bean.inventoryAgreement} ,return_days =#{bean.returnDays } ,updatetime=#{bean.updateTime} where id=#{bean.id}
			</if>
	</insert>	
	
	<update id="updateAliInfoDataDays">
		update ali_info_data set replacement_days = #{returnDays} where shop_id=#{shopId}
	</update>
	<select id="getAllShopInfo" resultType="com.cbt.warehouse.pojo.SupplierProductsBean">
		SELECT shop_id as shopId,quality,service,username as userName,createtime FROM supplier_product WHERE shop_id=#{shop_id} AND goods_pid=#{shop_id}
	</select>
	<select id="getAllShopGoodsInfo" resultType="com.cbt.warehouse.pojo.SupplierProductsBean">
		SELECT c.shop_id as shopId,c.pid as goodsPid,s.remark as remarks,c.remotpath,c.custom_main_image,s.quality,s.service,s.username as userName,s.id,s.createtime
		FROM custom_benchmark_ready c
		inner JOIN supplier_product s ON c.shop_id=s.shop_id AND c.pid=s.goods_pid and s.goods_pid&lt;>#{shop_id}
		WHERE c.valid=1 AND c.shop_id=#{shop_id}
		<if test="goodsPid != null">
			and c.pid=#{goodsPid}
		</if>
	</select>
	<select id="getAllShopGoodsInfoList" resultType="com.cbt.warehouse.pojo.SupplierProductsBean">
		SELECT c.shop_id as shopId,c.pid as goodsPid,'' as remarks,c.remotpath,c.custom_main_image,'' as quality,'' as service,''  as userName,createtime
		FROM custom_benchmark_ready c
		WHERE c.valid=1 AND c.shop_id=#{shop_id}
		<if test="goodsPid != null">
			and c.pid=#{goodsPid}
		</if>
		<if test="flag == 'true'">
			AND c.pid in(
				SELECT a.pid FROM(
					SELECT DISTINCT od.goods_pid pid FROM id_relationtable ir 
					INNER JOIN order_details od ON ir.orderid=od.orderid AND ir.goodid=od.goodsid
					INNER JOIN goods_distribution gd ON ir.orderid=gd.orderid AND ir.goodid=gd.goodsid
					WHERE ir.createtime >= NOW() - INTERVAL 8 DAY 
					AND od.checked=1 AND od.goods_pid IS NOT NULL
					AND gd.admuserid = #{userid}
				) a
				WHERE a.pid NOT IN (
					SELECT DISTINCT goods_pid FROM supplier_product
				)
			)
		</if>
	</select>
	<select id="getCooperatedCount" resultType="INTEGER">
		 SELECT COUNT(DISTINCT shop_id) FROM supplier_scoring WHERE LEVEL='合作过的供应商'
	</select>
	<select id="getHighCount" resultType="INTEGER">
		 SELECT COUNT(DISTINCT shop_id) FROM supplier_scoring WHERE LEVEL='优选供应商'
	</select>
	<select id="getBlacklistCount" resultType="INTEGER">
		 SELECT COUNT(DISTINCT shop_id) FROM supplier_scoring WHERE LEVEL='黑名单'
	</select>
	<select id="getOrdinaryCount" resultType="INTEGER">
		SELECT COUNT(DISTINCT shop_id) FROM supplier_scoring WHERE LEVEL='普通供应商'
	</select>
	<select id="lookQuestion" resultType="com.importExpress.pojo.QueAns">
		SELECT q.userid,IFNULL(q.question_content,'') AS question_content,
		IFNULL(a.admName,'') AS reply_name,IFNULL(q.reply_content,'') AS reply_content
		FROM question_answer q LEFT JOIN admuser a ON q.reply_name=a.id WHERE q.pid=#{pid}
	</select>
	<update id="updateRemark">
		update supplier_product set remark=#{remark},quality=#{newQuality} where id=${id}
	</update>
</mapper>
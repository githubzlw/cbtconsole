<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cbt.warehouse.dao.InventoryMapper" >
    <resultMap id="InventoryCheckRecordMap" type="com.cbt.website.bean.InventoryCheckRecord" >
        <result column="id" property="id" jdbcType="INTEGER" />
        <result column="inventory_check_id" property="inventoryCheckId" jdbcType="INTEGER" />
        <result column="inventory_sku_id" property="inventorySkuId" jdbcType="INTEGER" />
        <result column="goods_pid" property="goodsPid" jdbcType="VARCHAR" />
        <result column="goods_sku" property="goodsSku" jdbcType="VARCHAR" />
        <result column="goods_specid" property="goodsSpecid" jdbcType="VARCHAR" />
        <result column="goods_skuid" property="goodsSkuid" jdbcType="VARCHAR" />
        <result column="goods_price" property="goodsPrice" jdbcType="VARCHAR" />
        <result column="inventory_remaining" property="inventoryRemaining" jdbcType="INTEGER" />
        <result column="check_remaining" property="checkRemaining" jdbcType="INTEGER" />
        <result column="create_time" property="createTime" jdbcType="VARCHAR" />
        <result column="before_barcode" property="beforeBarcode" jdbcType="VARCHAR" />
        <result column="after_barcode" property="afterBarcode" jdbcType="VARCHAR" />
        <result column="goods_img" property="goodsImg" jdbcType="VARCHAR" />
    </resultMap>
    <resultMap id="InventoryCheckMap" type="com.cbt.website.bean.InventoryCheck" >
        <result column="id" property="id" jdbcType="INTEGER" />
        <result column="check_cat" property="checkCat" jdbcType="INTEGER" />
        <result column="check_time" property="checkTime" jdbcType="VARCHAR" />
        <result column="check_adm" property="checkAdm" jdbcType="INTEGER" />
        <result column="cancel_adm" property="cancelAdm" jdbcType="INTEGER" />
        <result column="cancel_time" property="cancelTime" jdbcType="VARCHAR" />
        <result column="cancel_remark" property="cancelRemark" jdbcType="VARCHAR" />
        <result column="cancle_flag" property="cancleFlag" jdbcType="INTEGER" />
    </resultMap>
    <resultMap id="inventoryDetailsMap" type="com.cbt.website.bean.InventoryDetails" >
        <result column="id" property="id" jdbcType="INTEGER" />
        <result column="sku" property="sku" jdbcType="VARCHAR" />
        <result column="goods_img" property="goodsImg" jdbcType="VARCHAR" />
        <result column="orderno" property="orderno" jdbcType="VARCHAR" />
        <result column="od_id" property="odId" jdbcType="INTEGER" />
        <result column="goods_pid" property="goodsPid" jdbcType="VARCHAR" />
        <result column="createtime" property="createtime" jdbcType="VARCHAR" />
        <result column="inventory_id" property="inventoryId" jdbcType="INTEGER" />
        <result column="goods_specid" property="goodsSpecid" jdbcType="VARCHAR" />
        <result column="good_skuid" property="goodsSkuid" jdbcType="VARCHAR" />
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="goods_number" property="goodsNumber" jdbcType="INTEGER" />
        <result column="del_datetime" property="delDatetime" jdbcType="VARCHAR" />
        <result column="del_remark" property="delRemark" jdbcType="VARCHAR" />
        <result column="del_adm" property="delAdm" jdbcType="VARCHAR" />
        <result column="del" property="del" jdbcType="INTEGER" />
    </resultMap>
    <resultMap id="InventorySkuMap" type="com.cbt.website.bean.InventorySku" >
        <result column="id" property="id" jdbcType="INTEGER" />
        <result column="goods_url" property="goodsUrl" jdbcType="VARCHAR" />
        <result column="remaining" property="remaining" jdbcType="INTEGER" />
        <result column="can_remaining" property="canRemaining" jdbcType="INTEGER" />
        <result column="good_name" property="goodsName" jdbcType="VARCHAR" />
        <result column="goods_price" property="goodsPrice" jdbcType="VARCHAR" />
        <result column="sku" property="sku" jdbcType="VARCHAR" />
        <result column="barcode" property="barcode" jdbcType="VARCHAR" />
        <result column="goods_p_url" property="goodsPUrl" jdbcType="VARCHAR" />
        <result column="goodscatid" property="goodsCatid" jdbcType="VARCHAR" />
        <result column="car_img" property="carImg" jdbcType="VARCHAR" />
        <result column="goods_p_price" property="goodsPPrice" jdbcType="VARCHAR" />
        <result column="flag" property="flag" jdbcType="INTEGER" />
        <result column="isLock" property="isLock" jdbcType="INTEGER" />
        <result column="od_id" property="odid" jdbcType="INTEGER" />
        <result column="goods_pid" property="goodsPid" jdbcType="VARCHAR" />
        <result column="createtime" property="createtime" jdbcType="VARCHAR" />
        <result column="updatetime" property="updatetime" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR" />
        <result column="goods_p_pid" property="goodsPPid" jdbcType="VARCHAR" />
        <result column="specid" property="specid" jdbcType="VARCHAR" />
        <result column="skuid" property="skuid" jdbcType="VARCHAR" />
        <result column="inventory_type" property="inventoryType" jdbcType="INTEGER" />
        <result column="db_flag" property="dbFlag" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="InventorySkuResultMap" type="com.cbt.website.bean.InventoryData" >
        <result column="id" property="id" jdbcType="INTEGER" />
        <result column="goods_url" property="goodsUrl" jdbcType="VARCHAR" />
        <result column="remaining" property="remaining" jdbcType="INTEGER" />
        <result column="can_remaining" property="canRemaining" jdbcType="INTEGER" />
        <result column="good_name" property="goodsName" jdbcType="VARCHAR" />
        <result column="goods_price" property="goodsPrice" jdbcType="VARCHAR" />
        <result column="sku" property="sku" jdbcType="VARCHAR" />
        <result column="barcode" property="barcode" jdbcType="VARCHAR" />
        <result column="goods_p_url" property="goodsPUrl" jdbcType="VARCHAR" />
        <result column="goodscatid" property="goodsCatid" jdbcType="VARCHAR" />
        <result column="car_img" property="carImg" jdbcType="VARCHAR" />
        <result column="goods_p_price" property="goodsPPrice" jdbcType="VARCHAR" />
        <result column="flag" property="flag" jdbcType="INTEGER" />
        <result column="isLock" property="isLock" jdbcType="INTEGER" />
        <result column="od_id" property="odid" jdbcType="INTEGER" />
        <result column="goods_pid" property="goodsPid" jdbcType="VARCHAR" />
        <result column="createtime" property="createtime" jdbcType="VARCHAR" />
        <result column="updatetime" property="updatetime" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR" />
        <result column="goods_p_pid" property="goodsPPid" jdbcType="VARCHAR" />
        <result column="specid" property="specid" jdbcType="VARCHAR" />
        <result column="skuid" property="skuid" jdbcType="VARCHAR" />
        <result column="categoryName" property="categoryName" jdbcType="VARCHAR" />
        <result column="unsellableReason" property="unsellableReason" jdbcType="VARCHAR" />
        <result column="online_flag" property="onlineFlag" jdbcType="INTEGER" />
        <result column="inventory_type" property="inventoryType" jdbcType="INTEGER" />
        <result column="db_flag" property="dbFlag" jdbcType="INTEGER"/>
        <result column="check_remaining" property="checkRemaining" jdbcType="INTEGER"/>
        <result column="inventory_check_id" property="inventoryCheckId" jdbcType="INTEGER"/>
        <result column="check_time" property="checkTime" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="InventoryResultMap" type="com.cbt.pojo.Inventory" >
        <result column="id" property="id" jdbcType="INTEGER" />
        <result column="goods_url" property="goods_url" jdbcType="VARCHAR" />
        <result column="add_goods" property="add_goods" jdbcType="INTEGER" />
        <result column="out_goods" property="out_goods" jdbcType="INTEGER" />
        <result column="remaining" property="remaining" jdbcType="INTEGER" />
        <result column="last_add_time" property="last_add_time" jdbcType="VARCHAR" />
        <result column="last_out_time" property="last_out_time" jdbcType="VARCHAR" />
        <result column="itemid" property="itemid" jdbcType="VARCHAR" />
        <result column="sku" property="sku" jdbcType="VARCHAR" />
        <result column="good_name" property="good_name" jdbcType="VARCHAR" />
        <result column="goodscatid" property="goodscatid" jdbcType="VARCHAR" />
        <result column="inventory_amount" property="inventory_amount" jdbcType="INTEGER" />
        <result column="car_img" property="car_img" jdbcType="VARCHAR" />
        <result column="userName" property="userName" jdbcType="VARCHAR" />
        <result column="goods_p_price" property="goods_p_price" jdbcType="VARCHAR" />
        <result column="goodsprice" property="goodsprice" jdbcType="VARCHAR" />
        <result column="flag" property="flag" jdbcType="INTEGER" />
        <result column="new_inventory_amount" property="new_inventory_amount" jdbcType="INTEGER" />
        <result column="new_barcode" property="new_barcode" jdbcType="VARCHAR" />
        <result column="new_remaining" property="new_remaining" jdbcType="INTEGER" />
        <result column="can_remaining" property="can_remaining" jdbcType="INTEGER" />
        <result column="goodsid" property="goodsid" jdbcType="VARCHAR" />
        <result column="onLine" property="onLine" jdbcType="VARCHAR" />
        <result column="unsellableReason" property="unsellableReason" jdbcType="VARCHAR"/>
        <result column="pid" property="pid" jdbcType="VARCHAR" />
        <result column="online_flag" property="online_flag" jdbcType="VARCHAR" />
        <result column="db_flag" property="db_flag" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap type="com.cbt.Specification.bean.AliCategory" id="AliCategoryMap">
        <result column="id" property="id" jdbcType="VARCHAR" />
        <result column="cid" property="cid" jdbcType="VARCHAR" />
        <result column="path" property="path" jdbcType="VARCHAR" />
        <result column="category" property="category" jdbcType="VARCHAR" />
        <result column="time" property="time" jdbcType="VARCHAR" />
    </resultMap>
    <select id="isExitBarcode" resultType="java.lang.Integer">
        SELECT COUNT(id) FROM storage_location WHERE barcode=#{barcode}
    </select>
    <insert id="recordLossInventory">
        insert into lossInventory (in_id,new_remaining,old_remaining,loss_inventory,old_barcode,new_barcode,loss_amount,loss_price,createtime,admName) values
        (#{in_id},#{new_remaining},#{old_remaining},#{loss_inventory},#{old_barcode},#{new_barcode},#{loss_amount},#{loss_price},now(),#{admName})
    </insert>
    <insert id="insertChangeBarcode">
        insert into change_barcode (in_id,init_barcode) select #{id},#{old_barcode} FROM DUAL WHERE NOT EXISTS (SELECT * FROM change_barcode WHERE in_id=#{id})
    </insert>
    <select id="queryInById" resultType="com.cbt.pojo.Inventory">
        select * from inventory where id=#{id}
    </select>
    <insert id="updateSourcesLog">
        INSERT INTO inventory_log_info (in_id,create_time,admName,old_inventory,new_inventroy,old_barcode,new_barcode,remark) VALUES
        (#{in_id},now(),#{name},#{old_remaining},#{new_remaining},#{old_barcode},#{new_barcode},#{remark})
    </insert>
    <update id="updateIsStockFlag">
        update custom_benchmark_ready set is_stock_flag=0 where pid=#{goods_pid};
    </update>
    <update id="updateIsStockFlag1">
        update custom_benchmark_ready_newest set is_stock_flag=0 where pid=#{goods_pid};
    </update>
    <select id="getIinOutInventory" resultMap="InventorySkuResultMap">
      select  isku.*,ifnull(c.valid,2) AS online_flag,c.unsellableReason as unsellableReason,
      cat.en_name as categoryName ,isc.check_time
      from inventory_sku isku 
      left join inventory_sku_check isc on isku.inventory_check_id=isc.id
      left join custom_benchmark_ready c on isku.goods_pid=c.pid
      left join 1688_category cat on isku.goodscatid=cat.category_id
    where 1=1
    <if test="inid>0">and isku.id=#{inid}</if>
    <if test="goods_pid != null"> and isku.goods_pid=#{goods_pid}</if>
    <if test="maxintentory!=0"> and isku.remaining &lt; #{maxintentory}</if>
    <if test="minintentory != 0"> and isku.remaining > #{minintentory}</if>
    <if test="goodscatid != 0">
	    <if test="goodscatid !=-1">
	    and isku.goodscatid = #{goodscatid}
	    </if>
    </if>
    <if test="goodscatid ==-1"> and isku.goodscatid='0'</if>
    
    <if test="isline == 1">and c.valid=1</if>
    <if test="isline == 2">and c.valid!=1</if>
     limit #{page},20
    </select>
    <select id="getIinOutInventoryCount" resultType="INTEGER">
       select count(isku.id) from inventory_sku  isku
       left join custom_benchmark_ready c on isku.goods_pid=c.pid
        where 1=1
        <if test="inid>0">and isku.id=#{inid}</if>
    <if test="goods_pid != null">and isku.goods_pid=#{goods_pid}</if>
    <if test="maxintentory!=0">and isku.remaining &lt; #{maxintentory}</if>
    <if test="minintentory != 0">and isku.remaining > #{minintentory}</if>
    <if test="goodscatid != 0">
	    <if test="goodscatid !=-1">
	    and isku.goodscatid=#{goodscatid}
	    </if>
    </if>
    <if test="goodscatid ==-1">and isku.goodscatid='0'</if>
    <if test="isline == 1">and c.valid=1</if>
    <if test="isline == 2">and c.valid!=1</if>
       
    </select>
    <update id="problem_inventory">
        update inventory set flag=2 where id=#{in_id}
    </update>
    <select id="searchAliCategory" resultMap="AliCategoryMap">
        <if test="type=='type1'">
            SELECT DISTINCT a.cid as cid,a.category as category FROM ali_category ac INNER JOIN ali_category a ON SUBSTRING_INDEX(ac.path, ',',1)=a.cid
        </if>
        <if test="type=='type2'">
            SELECT DISTINCT a.cid as cid,a.category as category FROM ali_category ac INNER JOIN ali_category a ON SUBSTRING_INDEX(SUBSTRING_INDEX(ac.path, ',',2),',',-1)=a.cid WHERE LOCATE(',',ac.path)>0 AND SUBSTRING_INDEX(ac.path, ',',1)=#{cid};
        </if>
        <if test="type=='type3'">
            SELECT DISTINCT a.cid as cid,a.category as category FROM ali_category ac INNER JOIN ali_category a ON SUBSTRING_INDEX(SUBSTRING_INDEX(ac.path, ',',3),',',-1)=a.cid WHERE LOCATE(',',ac.path)>0 AND CHAR_LENGTH(ac.path)-CHAR_LENGTH(REPLACE(ac.path, ',', '' ))=2 AND SUBSTRING_INDEX(SUBSTRING_INDEX(ac.path, ',',2),',',-1)=#{cid};
        </if>
        <if test="type=='type4'">
            SELECT DISTINCT a.cid AS cid,a.category AS category FROM ali_category ac INNER JOIN ali_category a ON SUBSTRING_INDEX(SUBSTRING_INDEX(ac.path, ',',4),',',-1)=a.cid WHERE LOCATE(',',ac.path)>0 AND CHAR_LENGTH(ac.path)-CHAR_LENGTH(REPLACE(ac.path, ',', '' ))=3 AND SUBSTRING_INDEX(SUBSTRING_INDEX(ac.path, ',',3),',',-1)=#{cid};
        </if>
        <if test="type=='type5'">
            SELECT DISTINCT a.cid AS cid,a.category AS category FROM ali_category ac INNER JOIN ali_category a ON SUBSTRING_INDEX(SUBSTRING_INDEX(ac.path, ',',5),',',-1)=a.cid WHERE LOCATE(',',ac.path)>0 AND CHAR_LENGTH(ac.path)-CHAR_LENGTH(REPLACE(ac.path, ',', '' ))=4 AND SUBSTRING_INDEX(SUBSTRING_INDEX(ac.path, ',',4),',',-1)=#{cid};
        </if>
    </select>
    <select id="queryInId" resultMap="InventoryResultMap">
        SELECT * FROM inventory WHERE goods_pid=#{goods_pid} AND IFNULL(sku,'')=#{old_sku} AND barcode=#{old_barcode}
        <if test="car_urlMD5 != null">
            AND car_urlMD5=#{car_urlMD5}
        </if>
    </select>
    <update id="updateSources">
        <choose>
            <when test="flag==1">
                update inventory set new_remaining=#{new_remaining},can_remaining=#{new_remaining},updatetime=now(),barcode=#{new_barcode},new_inventory_amount=#{new_inventory_amount},flag=1,remark=#{remark} where
                IFNULL(sku,'')=#{old_sku}
                <if test="car_urlMD5 != null">
                    and car_urlMD5=#{car_urlMD5}
                </if>
                and goods_pid=#{goods_pid} and barcode=#{old_barcode}
            </when>
            <otherwise>
                update inventory set new_remaining=#{new_remaining},can_remaining=#{new_remaining},updatetime=now(),barcode=#{new_barcode},new_inventory_amount=#{new_inventory_amount},flag=1,remark=#{remark} where
                IFNULL(sku,'')=#{old_sku}
                <if test="car_urlMD5 != null">
                    and car_urlMD5=#{car_urlMD5}
                </if>
                and goods_pid=#{goods_pid} and barcode=#{old_barcode}
            </otherwise>
        </choose>
    </update>
    <select id="getInventoryByPid" resultType="com.cbt.pojo.Inventory">
        select id,type from inventory where goods_pid=#{pid} and type=1
    </select>
    <insert id="insertInventoryYmx">
        insert into inventory(goods_url,new_remaining,can_remaining,barcode,goods_p_url,new_inventory_amount,car_img,flag,goods_pid,createtime,updatetime,remark,type,goods_p_price,remaining,good_name) VALUES
        (#{goods_url},#{count},#{count},#{barcode},#{goods_p_url},#{new_inventory_amount},#{img},1,#{itmeid},now(),now(),#{remark},1,#{goods_p_price},0,#{good_name})
    </insert>
    <select id="getNewInventory" resultType="com.cbt.website.bean.PurchaseSamplingStatisticsPojo">
        SELECT SUM(IF(flag=0,remaining,new_remaining)) AS admName,SUM(IF(flag=0,inventory_amount,new_inventory_amount)) AS pid
        FROM inventory WHERE DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= DATE(createtime)
    </select>
    <select id="getSaleInventory" resultType="com.cbt.website.bean.PurchaseSamplingStatisticsPojo">
        SELECT COUNT(lock_remaining)  AS admName,SUM(lock_inventory_amount) AS pid FROM lock_inventory WHERE DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= DATE(createtime)  AND is_use=1 AND flag=1 and is_delete=0
    </select>
    <select id="getLossInventory" resultType="com.cbt.website.bean.PurchaseSamplingStatisticsPojo">
        SELECT SUM(old_remaining-new_remaining)  AS admName,cast(SUM(loss_amount) as decimal(10,2)) AS pid FROM lossInventory WHERE DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= DATE(createtime)
    </select>
    <select id="getDeleteInventory" resultType="com.cbt.website.bean.PurchaseSamplingStatisticsPojo">
        SELECT SUM(IF(idd.flag=0,idd.remaining,idd.new_remaining)) AS admName,SUM(IF(idd.flag=0,idd.inventory_amount,idd.new_inventory_amount)) AS pid
        FROM inventory_log_info ili INNER JOIN inventory_delete_details idd ON ili.in_id=idd.id
        WHERE ili.remark='库存删除'  AND DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= DATE(idd.createtime)
    </select>
    <delete id="deleteInventory">
        INSERT INTO inventory_delete_details SELECT *,#{dRemark} FROM inventory WHERE id= #{id};
        delete from inventory where id=#{id};
    </delete>
    <update id="updateIsStockFlag2">
        update custom_benchmark_ready set is_stock_flag=0 where pid=#{goods_pid};
    </update>
    <select id="findOrderDetails" resultType="com.cbt.bean.OrderDetailsBean">
        select od.*,ops.goods_p_price from order_details od inner join order_product_source ops ON od.goodsid=ops.goodsid
        where od.orderid=#{orderid} and od.goodsid=#{goodsid} limit 1
    </select>
    <insert id="inventoryEntry">
        insert into inventory (goods_url,remaining,can_remaining,good_name,sku,barcode,goodscatid,inventory_amount,car_img,goods_pid,car_urlMD5,createtime,goods_p_price,remark,flag,updatetime,new_inventory_amount,new_remaining)
        values (#{goods_url},#{count},#{count},#{goods_name},#{sku},#{in_barcode},(SELECT DISTINCT a.category FROM ali_category ac INNER JOIN ali_category a ON SUBSTRING_INDEX(ac.path, ',',1)=a.cid WHERE ac.cid=#{goodscatid}),
        #{inventory_amount},#{car_img},#{goods_pid},#{car_urlMD5},now(),#{goods_p_price},#{remark},1,now(),#{inventory_amount},#{count})
    </insert>
    
    
    <!-- ********************************库存数据*************************** -->
    
    <!-- 库存记录变更表  -->
   <insert id="addInventorLogByInventoryid" parameterType="java.util.Map">
   insert into inventory_sku_log(goods_url,remaining,before_remaining,
   after_remaining,good_name,sku,barcode,goods_pid,
   createtime,remark,change_type,goods_p_pid,specid,skuid,inventory_sku_id)
   
   (select goods_url,#{inventory_count},#{before_remaining},#{after_remaining},good_name,sku,
   barcode,goods_pid,now(),#{log_remark},#{change_type},goods_p_pid,specid,skuid,id 
   from inventory_sku where id=#{inventory_sku_id})
   </insert>
  

    <!-- 获取订单信息  -->
    <select id="getOrderDetails" resultType="java.util.Map">
    select od.id as odid,od.goodsid,od.goodsprice,od.yourorder,od.goods_pid,trim(od.car_type) as car_type,od.car_urlMD5,od.goodsname,od.car_url,
    th.orderid as tborderid,od.goodscatid,od.car_img,ops.goods_p_price,th.imgurl as goods_p_img,th.itemurl,
	ops.goods_p_url,ops.tb_1688_itemid 	
	from order_details od 
	inner join order_product_source ops on (od.id=ops.od_id and od.orderid=ops.orderid )
	inner join id_relationtable ir on ir.odid=od.id
	inner join taobao_1688_order_history th on  th.orderid=ir.tborderid 
	where od.orderid=#{orderid} and od.id=#{odid}  limit 1
    </select>
    
   <!-- 插入库存明细 -->
    <insert id="addInventoryDetailsSku">
    insert into inventory_details_sku(goods_pid,goods_p_pid,sku,good_skuid,goods_price,
    goods_p_price,goods_number,od_id,createtime,admid,type,inventory_id,
    goods_p_url,good_name,goods_specid,goods_img)
    
    (select  goods_pid,goods_p_pid,sku,skuid,goods_price,goods_p_price,#{inventory_count},od_id,now(),
    #{admid},#{type},id,goods_p_url,good_name,specid,car_img
    from inventory_sku where id=#{inventory_sku_id})
    
    </insert>
    
    <insert id="insertStorageOutboundDetails">
    insert into storage_outbound_details 
    (orderid,goodsid,in_id,storage_count,type,createtime,admName,when_count,add_inventory) values
    (#{orderid},#{goodsid},#{inventory_sku_id},#{storage_count},#{storage_type},now(),#{adminId},#{when_count},#{inventory_count})
    
    </insert>
    <!-- 订单关联库存，查询是否有可用库存 -->
    <select id="getInventoryByOrderDetialsId" resultType="java.util.Map">
    select odsm.goods_pid, odsm.specid,odsm.skuid,isku.can_remaining,isku.remaining,isku.id as inventory_id from 
     order_details_sku_match odsm 
     left join inventory_sku isku on (odsm.goods_pid=isku.goods_pid 
    and odsm.specid=isku.specid  and odsm.skuid=isku.skuid )
    left join order_details od on od.id=odsm.order_details_id
    where odsm.skuid!='' and odsm.specid!='' and odsm.order_details_id=#{odid}  and od.checked=0 and state=0 limit 1
    </select>
    <!-- 获取库存表货源数据  -->
    <select id="getInventoryDetailSku" resultType="java.util.Map">
    select 
    1688_orderid,good_name,goods_p_pid,sku,1688_shipno,admid,goods_p_img,goods_p_url,goods_p_skuid,goods_p_specid,goods_p_price
    from inventory_details_sku where type=0 and inventory_id=#{inventory_sku_id} order by id desc 
    limit 1
    </select>
    <!--  -->
    <insert id="addIdRelationTable">
    insert into id_relationtable ( orderid,goodid,odid,goodurl,goodstatus,goodarrivecount,
    barcode,tborderid,position,shipno, username,userid,state,itemid,is_delete,store_name,
    taobaospec,warehouse_remark,taobaoprice,itemqty,
   is_replenishment,weight,is_refund,specid,skuid,createtime)
    
    values(#{orderid},#{goodid},#{odid},#{goodurl},#{goodstatus},#{goodarrivecount},
    #{barcode},#{tborderid},#{position},#{shipno},#{username},#{userid},#{state},#{itemid},#{is_delete},#{store_name},
    #{taobaospec},#{warehouse_remark},#{taobaoprice},#{itemqty},
    #{is_replenishment},#{weight},#{is_refund},#{specid},#{skuid},now())
    
    </insert>
    <!-- 锁定库存 -->
    <insert id="insertLockInventory" useGeneratedKeys="true" keyProperty="id" parameterType="com.cbt.website.bean.InventoryLock">
    INSERT INTO lock_inventory (in_id,lock_remaining,od_id,createtime,lock_inventory_amount,is_use,is_delete,flag) values(
    #{inId},#{lockRemaining},#{odId},now(),#{lockInventoryAmount},#{isUse},#{isDelete},#{flag}
    )
    </insert>
    <!--库存损益表  -->
    <insert id="addLossInventoryRecord" useGeneratedKeys="true" keyProperty="id" parameterType="com.cbt.website.bean.LossInventoryRecord">
    insert into loss_inventory_record(inventory_sku_id,goods_pid,skuid,specid,change_number,
    change_type,change_adm,change_time,delete_state,delete_adm,delete_time)
    values
    (#{inventorySkuId},#{goodsPid},#{skuid},#{specid},#{changeNumber},#{changeType},
    #{changeAdm},now(),#{deleteState},#{deleteAdm},now())
    </insert>
    <!-- 库存明细列表 -->
    <select id="inventoryDetails" resultMap="inventoryDetailsMap">
    select  id,inventory_id,goods_pid,sku,good_skuid,type,goods_specid,del_remark,del_adm,
    del_datetime,createtime,del,goods_img,goods_number,od_id,orderno
    
    
    from  inventory_details_sku where 1=1
    <if test="inventory_sku_id > 0">
    and inventory_id=#{inventory_sku_id}
    </if>
    
    limit #{page},20
    
    </select>
    <select id="inventoryDetailsCount" resultType="Integer">
     select  count(id)
    from  inventory_details_sku where inventory_id=#{inventory_sku_id}
    </select>
    
    <!-- 库存表  -->
    <insert id="insertInventory" useGeneratedKeys="true" keyProperty="id" parameterType="com.cbt.website.bean.InventorySku">
    insert into inventory_sku(goods_url,remaining,can_remaining,good_name,sku,barcode,goodscatid,inventory_type,
    car_img,goods_pid,car_urlMD5,createtime,goods_p_price,goods_p_url,updatetime,specid,skuid,goods_p_pid,od_id,goods_price,db_flag) 
	values(#{goodsUrl},#{remaining},#{canRemaining},#{goodsName},#{sku},#{barcode},
	#{goodsCatid},#{inventoryType},#{carImg},#{goodsPid},#{carUrlMD5},now(),#{goodsPPrice},
	#{goodsPUrl},now(),#{specid},#{skuid},#{goodsPPid},#{odid},#{goodsPrice},#{dbFlag})
    </insert>
    <!-- 更新库存  -->
    <update id="updateInventory">
    update inventory_sku set remaining=#{remaining},can_remaining=#{canRemaining},updatetime=now() where id=#{id}
    </update>
    <!-- 更新库存  -->
    <update id="updateInventoryCheckFlag">
    update inventory_sku set remaining=#{remaining},can_remaining=#{canRemaining},check_remaining=#{checkRemaining},
    inventory_check_id=#{inventoryCheckId},
    barcode=#{barcode},
    flag=1,updatetime=now() where id=#{id}
    </update>
    <!-- 获取库存表  -->
    <select id="getInventory" resultMap="InventorySkuMap">
    select id,od_id,remaining,can_remaining,goods_p_url,goods_p_price,
    barcode,car_urlMD5,goods_pid,sku,
    good_name,goods_p_pid,goods_url,goods_price,specid,skuid
    from inventory_sku 
    where 1=1
    <if test="id>0">
    and id=#{id}
    </if>
    <if test="id==0">
    <if test="odid>0">
    and od_id=#{odid}
    </if>
    <if test="odid==0">
    <if test="goodsPid!=null">
    and goods_pid=#{goodsPid} 
    and specid=#{specid} and skuid=#{skuid}
    </if>
    </if>
    </if>
    limit 1
    </select>
    <!-- 库存记录变更表  -->
    <insert id="insertInventoryLog" useGeneratedKeys="true" keyProperty="id" parameterType="com.cbt.website.bean.InventoryLog">
    insert into inventory_sku_log(goods_url,remaining,before_remaining,
   after_remaining,good_name,sku,barcode,goods_pid,
   createtime,remark,change_type,goods_p_pid,specid,skuid,inventory_sku_id)
   values(#{goodsUrl},#{remaining},#{beforeRemaining},#{afterRemaining},
   #{goodsName},#{sku},#{barcode},#{goodsPid},now(),#{remark},#{changeType},
   #{goodsPPid},#{specid},#{skuid},#{inventorySkuId})
    </insert>
    <!--  库存明细表-->
    <insert id="insertInventoryDetailsSku" useGeneratedKeys="true" keyProperty="id" parameterType="com.cbt.website.bean.InventoryDetails">
    insert into inventory_details_sku(goods_pid,goods_p_pid,sku,good_skuid,goods_p_skuid,goods_price,
    goods_p_price,goods_number,1688_orderid,1688_shipno,orderno,od_id,createtime,admid,type,inventory_id,
    goods_p_url,goods_p_img,good_name,goods_specid,goods_p_specid,goods_img)
    value(#{goodsPid},#{goodsPPid},#{sku},#{goodsSkuid},#{goodsPSkuid},#{goodsPrice},#{goodsPPrice},
    #{goodsNumber},#{tbOrderid},#{tbShipno},#{orderno},#{odId},now(),#{admid},#{type},#{inventoryId},
    #{goodsPUrl},#{goodsPImg},#{goodsName},#{goodsSpecid},#{goodsPSpecid},#{goodsImg})
    </insert>
    <!-- 根据1688订单号或运单号查询产品数据 -->
    <select id="getTbGoods" resultType="java.util.Map">
    select  orderid,shipno,itemname,itemprice,itemqty,sku,skuID,specId,imgurl,itemurl,itemid
    from  taobao_1688_order_history where orderid=#{orderShipno} or shipno=#{orderShipno}
    
    </select>
    <!-- 开始盘点 -->
    <insert id="insertInventoryCheck" useGeneratedKeys="true" keyProperty="id" parameterType="com.cbt.website.bean.InventoryCheck">
    insert into inventory_sku_check(check_cat,check_adm,check_time) values(#{checkCat},#{checkAdm},now())
    </insert>
    <!-- 取消盘点 -->
    <update id="updateInventoryCheckCancel"  parameterType="com.cbt.website.bean.InventoryCheck">
    update inventory_sku_check set cancel_adm=#{cancelAdm} ,cancel_remark=#{cancelRemark},cancel_time=now(),cancle_flag=1 where id=#{id}
    </update>
    <!-- 获取最近一次盘点 -->
    <select id="getLastInventoryCheck" resultMap="InventoryCheckMap">
    select  id,check_cat,check_adm,check_time from inventory_sku_check where cancle_flag=0 and check_done=1 order by id desc limit 1
    </select>
    <!-- 批量插入盘点记录 -->
    <insert id="iBatchInventoryCheckRecord">
    insert into inventory_sku_check_record(inventory_check_id,inventory_sku_id,goods_pid,goods_sku,
    goods_specid,goods_skuid,goods_price,inventory_remaining,check_remaining,
    before_barcode,after_barcode,create_time)
    values
    <foreach collection="list" separator="," item="item">
    (#{item.inventoryCheckId},#{item.inventorySkuId},#{item.goodsPid},#{item.goodsSku},#{item.goodsSpecid},
    #{item.goodsSkuid},#{item.goodsPrice},#{item.inventoryRemaining},#{item.checkRemaining},
    #{item.beforeBarcode},#{item.afterBarcode},now())
    </foreach>
    </insert>
    <!--  -->
    <select id="getInventoryByIds" resultMap="InventorySkuResultMap">
    select is.id,is.check_remaining,isc.check_time
    from  inventory_sku is left join inventory_sku_check isc on is.inventory_check_id =isc.id 
    where is.id in 
    <foreach collection="list" item="item" separator="," open="(" close=")">
    #{item}
    </foreach>
    <!-- 更新盘点记录完结 -->
    </select>
    <update id="updateInventoryCheckDone">
    update inventory_sku_check set check_done=1 where id=#{id}
    </update>
    <!-- 获取库存类别列表 -->
    <select id="getInventoryCatList" resultType="java.util.Map">
     select  isu.goodscatid as catid,c.en_name as catname
    from  inventory_sku isu 
    left join 1688_category c on isu.goodscatid=c.category_id group by isu.goodscatid
    </select>
    <!-- 完结盘点 -->
    <insert id="doneInventoryCheckRecord">
    insert into inventory_sku_check_record(inventory_check_id,inventory_sku_id,goods_pid,goods_sku,
    goods_specid,goods_skuid,goods_price,inventory_remaining,check_remaining,create_time,before_barcode,after_barcode) 
    (select inventory_check_id,inventory_sku_id,goods_pid,goods_sku,
    goods_specid,goods_skuid,goods_price,inventory_remaining,check_remaining,create_time,before_barcode,after_barcode 
    from inventory_sku_check_record_temp where inventory_check_id=#{checkId})
    </insert>
    <!-- 更新阿盘点数据 -->
    <update id="updateInventoryCheckRecord">
    update inventory_sku_check_record_temp set 
    check_remaining=#{checkRemaining},after_barcode=#{afterBarcode},create_time=now() where id=#{id}
    where id=#{id}
    </update>
    <!-- 插入本次盘点数据 -->
    <insert id="insertInventoryCheckRecord" useGeneratedKeys="true" keyProperty="id" parameterType="com.cbt.website.bean.InventoryCheckRecord">
    insert into inventory_sku_check_record_temp(inventory_check_id,inventory_sku_id,goods_pid,goods_sku,
    goods_specid,goods_skuid,goods_price,inventory_remaining,check_remaining,create_time,before_barcode,after_barcode) 
    values(#{inventoryCheckId},#{inventorySkuId},#{goodsPid},#{goodsSku},
    #{goodsSpecid},#{goodsSkuid},#{goodsPrice},#{inventoryRemaining},
    #{checkRemaining},now(),#{beforeBarcode},#{afterBarcode})
    </insert>
    <!-- 获取本次盘点数据 -->
    <select id="getInventoryCheckRecord" resultMap="InventoryCheckRecordMap">
    select id,inventory_check_id,inventory_sku_id,goods_pid,goods_sku,
    goods_specid,goods_skuid,goods_price,inventory_remaining,check_remaining,create_time,before_barcode,after_barcode
    from inventory_sku_check_record_temp where inventory_check_id=#{checkId}
    </select>
    <!-- 获取盘点历史数据 -->
    <select id="getICRHistory" resultMap="InventoryCheckRecordMap">
    select iscr.id,iscr.inventory_check_id,iscr.inventory_sku_id,iscr.goods_pid,iscr.goods_sku,
    iscr.goods_specid,iscr.goods_skuid,iscr.goods_price,iscr.inventory_remaining,
    iscr.check_remaining,iscr.create_time,iscr.before_barcode,iscr.after_barcode,isk.car_img as goods_img
    
    from inventory_sku_check_record 
    iscr left join inventory_sku isk on iscr.inventory_sku_id=isk.id
    
    where 1=1
    <if test="goodsPid !=null">and iscr.goods_pid=#{goodsPid}</if>
    <if test="inid > 0">and iscr.inventory_sku_id=#{inid} </if>
    
    limit #{page},50
    </select>
    <!-- 获取盘点历史数据 -->
    <select id="getICRHistoryCount" resultType="Integer">
    select count(id)
    from inventory_sku_check_record where  1=1
    <if test="goodsPid !=null">and iscr.goods_pid=#{goodsPid}</if>
    <if test="inid > 0">and iscr.inventory_sku_id=#{inid} </if>
    </select>
    <!-- 删除临时盘点数据 -->
    <delete id="deleteInventoryCheckRecord">
    delete from inventory_sku_check_record_temp where inventory_check_id=#{checkId}
    </delete>
    <update id="updateOrderDetailsState">
    update order_details state=1,checked=1 set where id=#{odid}
    </update>
    <select id="getOrderDetailsAndInventoryUsed">
    SELECT i.goods_p_price,od.car_img,i.barcode as i_barcode,ir.barcode,od.orderid,od.goodsid,li.in_id,li.id,
    li.od_id,i.remaining,li.lock_remaining,i.can_remaining,i.flag,li.flag as li_flag ,
    ibr.state as barcodeState,ibr.id as barcodeId
    
    FROM lock_inventory li 
        		INNER JOIN order_details od ON li.od_id=od.id 
        		LEFT JOIN inventory_sku i ON li.in_id=i.id 
        		left join id_relationtable ir on od.orderid=ir.orderid and od.goodsid=ir.goodid 
        		left join inventory_barcode_record ibr on li.id=ibr.lock_id
        		WHERE li.is_delete=0 AND od.orderid=#{orderid}
    </select>
    <select id="getCheckedOrderDetails">
    SELECT od.id,od.orderid,od.goodsid,od.car_url,od.seilUnit,od.goodsname,od.goodscatid,od.car_img,od.goods_pid,od.car_urlMD5,od.yourorder,
    od.car_type,id.barcode,ca.en_name,
    ops.goods_p_price,ops.usecount,ops.goods_p_url,ops.goodsid,
	odsm.specid,odsm.skuid,
	toh.specId as tbspecid,toh.skuID as tbskuid,toh.shipno,toh.orderid as tborderid,toh.sku,
	li.lock_remaining
	
	FROM order_details od 
	INNER JOIN order_product_source ops ON od.id=ops.od_id
	INNER JOIN id_relationtable id ON od.id=id.odid
	LEFT JOIN 1688_category ca ON od.goodscatid=ca.category_id
	left join order_details_sku_match odsm on od.id=odsm.order_details_id
	left join taobao_1688_order_history toh on toh.odid=od.id
	left join lock_inventory li on li.od_id=od.id
	WHERE  od.checked=1 AND id.goodstatus=1 and od.orderid=#{orderid}
    
   
    </select>
    <update id="cancelLockInventory">
    update locak_inventory set is_delete=1 where id=#{id}
    </update>
    
    <insert id="insertInventoryBarcodeRecord" parameterType="com.cbt.website.bean.InventoryBarcodeRecord">
    insert into inventory_barcode_record(in_id,in_barcode,order_barcode,lock_id,state,admid,od_id) 
    values(#{inventoryId},#{inventoryBarcode},#{orderBarcode},#{lockId},#{state},#{admid},#{odId})
    </insert>
    
    <update id="updateBarcodeRecord">
    update inventory_barcode_record set state=#{state} where id=#{id}
    </update>
    
</mapper>
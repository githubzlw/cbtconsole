<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:util="http://www.springframework.org/schema/util" 
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd" default-lazy-init="true">
	<description>Shiro安全配置</description>
	<!--
        1.配置lifecycleBeanPostProcessor，可以在Spring IOC容器中调用shiro的生命周期方法.
    -->
    <bean class="org.apache.shiro.spring.LifecycleBeanPostProcessor" id="lifecycleBeanPostProcessor" />

    <!--
        2.启用Spring IOC容器Shiro注解，但必须配置了lifecycleBeanPostProcessor后才可以使用
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />
	
	<!-- 3.开启Spring AOC Shiro注解支持 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
	
	
	<!-- Shiro's main business-tier object for web-enabled applications -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realms" ref="shiroRealm" />
		<property name="cacheManager" ref="cacheManager"/>
		 <!-- <property name="authenticator" ref="authenticator"></property> -->
		  <property name="rememberMeManager.cookie.maxAge" value="86400"></property>
	</bean>
	<!-- 配置 CacheManager： 需要加入 ehcache 的 jar 包及配置文件. -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>

	<!-- 配置 Realm :直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean -->
	<!-- 
    	3. 配置 Realm 
    	3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean
    -->     
    <bean id="shiroRealm" class="com.cbt.shiro.ShiroRealm">
	   <!-- 配置加密算法 -->
	   <property name="credentialsMatcher" >
	    <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		    <!-- 指定加密算法类型 -->
		    <property name="hashAlgorithmName" value="MD5"></property>
		   <!--  指定加密次数 -->
		   <property name="hashIterations" value="1"></property>
	    </bean> 
	    </property>
    </bean>
    <bean id="shiroDbRealm" class="com.cbt.shiro.ShiroDbRealm">
		<property name="iUserServer" ref="iUserServer"/>
	</bean>
    
    
	<!-- 配置 ShiroFilter. 
 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
  若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean. -->
	  <!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 -->
    <bean id="filterChainDefinitionMapBuilder" class="com.cbt.filter.FilterChainDefinitionMapBuilder"></bean>

  
    <bean id="filterChainDefinitionMap"  
    factory-bean="filterChainDefinitionMapBuilder" 
    factory-method="buildFilterChainDefinitionMap"></bean>
    
    	
	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/website/main_login.jsp" />
		<property name="successUrl" value="/website/main_menu.jsp" />
		<property name="unauthorizedUrl" value="/apa/unauth.html"/>
	<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
		<!-- <property name="filterChainDefinitions"> -->
		 <!--  
        	配置哪些页面需要受保护. 
        	以及访问这些页面需要的权限. 
        	1). anon 可以被匿名访问
        	2). authc 必须认证(即登录)后才可能访问的页面. 
        	3). logout 登出.
        	4). roles 角色过滤器 
        -->
			<!-- <value> -->
			<!--
				/login = authc
				/logout = logout
				/static/** = anon
				/api/** = anon
				/register/** = anon
				/admin/** = roles[admin]
				/** = user
				
				/website/main_menu.jsp = anon
		 -->
				<!-- /css/** = anon
				/img/** = anon
				/js/** = anon
				/source/** = anon
				/jquery-easyui-1.5.2/** = anon
				/userLogin/checkUserInfo.do = anon
				/userLogin/loginOut.do = logout
				/** = authc
			</value>
		</property> -->
		<!-- 自定义shiro 的 Filter -->
		<property name="filters">
		<util:map>
		<entry key="authc" value-ref="myFormAuthenticationFilter"></entry>
		<entry key="roles" value-ref="myRolesFilter"></entry> 
		<entry key="perms" value-ref="orFilter"></entry> 

		</util:map>
		</property>
	</bean>
	
	<!-- 用户授权信息Cache, 采用EhCache -->
	<!-- <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml"/>
	</bean> -->
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<!-- <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/> 
    </bean>-->
    <bean id="iUserServer" class="com.cbt.processes.service.UserServer"></bean>
    <bean id="myFormAuthenticationFilter" class="com.cbt.filter.MyFormAuthenticationFilter"></bean>
    <bean id="myRolesFilter" class="com.cbt.filter.MyRolesFilter"></bean>
    <!-- 自定义的过滤器 -->
	<bean id="orFilter" class="com.cbt.filter.CustomAuthorizationFilter" />
    
    <!-- 配置认证器 -->
  	<!-- <bean id="authenticator" 
    	class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
    	<property name="realms">
	    	<list>
		    	<ref bean="jdbcRealm"/>
	    	</list>
    	</property>
    	<property name="authenticationStrategy">
    	<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean>
    	</property>
    </bean> -->
    
    
 <!--     <bean id="secondRealm" class="com.atguigu.shiro.realms.SecondRealm">
	   配置加密算法
	    <property name="credentialsMatcher">
	    <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
	    指定加密算法类型
	    <property name="hashAlgorithmName" value="SHA1"></property>
	    指定加密次数
	    <property name="hashIterations" value="1024"></property>
	    
	    </bean>
	    </property>
    </bean> -->
</beans>
